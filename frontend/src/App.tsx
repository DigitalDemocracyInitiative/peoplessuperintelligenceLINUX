import React, { useState, FormEvent, ChangeEvent, useEffect, useRef } from 'react';
import axios from 'axios';
import './App.css';

// Configure Axios to send cookies/credentials
axios.defaults.withCredentials = true;

interface Message {
  id?: number;
  text: string;
  sender: 'user' | 'ai' | 'system-info';
  timestamp?: string;
  agentAction?: 'none' | 'tool_needed' | 'tool_used' | 'llm_deepseek' | 'llm_mistral' |
                'file_read_success' | 'file_read_failure' | 'file_write_success' | 'file_write_failure' |
                'internet_search_success' | 'internet_search_failure' |
                'orchestrating' | 'tool_selection' | 'llm_selection' | 'orchestrator_direct' | 'orchestration_error' |
                'tool_failure'; // Added tool_failure for consistency
  toolDetails?: any;
}

interface AgentProfile {
  id: number;
  name: string;
  description: string;
  is_default: boolean;
}

function App() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [profiles, setProfiles] = useState<AgentProfile[]>([]);
  const [currentProfileId, setCurrentProfileId] = useState<number | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // Load chat history and profiles on component mount
  useEffect(() => {
    const loadData = async () => {
      try {
        // Load history
        const historyResponse = await axios.get('http://localhost:5000/api/history');
        const historyMessages: Message[] = historyResponse.data.map((msg: any) => ({
          text: msg.text,
          sender: msg.sender,
          id: msg.id,
          timestamp: msg.timestamp,
          agentAction: msg.agent_action || 'none'
        }));
        setMessages(historyMessages);

        // Load profiles
        const profilesResponse = await axios.get('http://localhost:5000/api/profiles');
        setProfiles(profilesResponse.data.profiles);
        // Set current profile from session, or default if not set
        if (profilesResponse.data.current_profile_id) {
          setCurrentProfileId(profilesResponse.data.current_profile_id);
        } else {
          const defaultProfile = profilesResponse.data.profiles.find((p: AgentProfile) => p.is_default);
          if (defaultProfile) {
            setCurrentProfileId(defaultProfile.id);
          }
        }

      } catch (error) {
        console.error('Error loading initial data:', error);
        setMessages([{ text: 'Error: Could not load initial data (history or profiles).', sender: 'system-info' }]);
      }
    };
    loadData();
  }, []);

  // Scroll to bottom whenever messages update
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (e: FormEvent) => {
    e.preventDefault();
    if (input.trim() === '') return;

    const userMessage: Message = { text: input, sender: 'user', timestamp: new Date().toISOString() };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const response = await axios.post('http://localhost:5000/api/chat', {
        message: input,
      });
      const aiResponseData = response.data;

      // Handle system messages generated by the backend (orchestration, tool actions)
      // These are now handled directly by the backend saving them to DB, and they load with history.
      // We just need to ensure the final AI message is added.

      const aiMessage: Message = { text: aiResponseData.response, sender: 'ai', agentAction: aiResponseData.agent_action, timestamp: new Date().toISOString() };
      setMessages((prevMessages) => [...prevMessages, aiMessage]);

    } catch (error) {
      console.error('Error sending message to backend:', error);
      const errorMessage: Message = {
        text: 'Error: Could not get response from AI. Check backend (http://localhost:5000) and Ollama (http://localhost:11434) and their logs.',
        sender: 'ai',
        timestamp: new Date().toISOString()
      };
      setMessages((prevMessages) => [...prevMessages, errorMessage]);
    } finally {
      setLoading(false);
      // Re-load history to include system messages logged by backend during the last turn
      try {
        const historyResponse = await axios.get('http://localhost:5000/api/history');
        const updatedHistoryMessages: Message[] = historyResponse.data.map((msg: any) => ({
          text: msg.text,
          sender: msg.sender,
          id: msg.id,
          timestamp: msg.timestamp,
          agentAction: msg.agent_action || 'none'
        }));
        setMessages(updatedHistoryMessages);
      } catch (error) {
        console.error('Error reloading history after send:', error);
      }
    }
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleProfileChange = async (e: ChangeEvent<HTMLSelectElement>) => {
    const newProfileId = parseInt(e.target.value);
    if (newProfileId) {
      try {
        const response = await axios.post(`http://localhost:5000/api/set_profile/${newProfileId}`);
        if (response.status === 200) {
          setCurrentProfileId(newProfileId);
          const profileName = profiles.find(p => p.id === newProfileId)?.name || 'Unknown';
          setMessages((prev) => [...prev, { sender: 'system-info', text: `Agent profile set to: ${profileName}.`, timestamp: new Date().toISOString() }]);
        }
      } catch (error) {
        console.error('Error setting profile:', error);
        setMessages((prev) => [...prev, { sender: 'system-info', text: 'Error setting agent profile.', timestamp: new Date().toISOString() }]);
      }
    }
  };

  const currentProfileName = profiles.find(p => p.id === currentProfileId)?.name || 'Loading...';

  return (
    <div className="App">
      <header className="App-header">
        <h1>PSI AI Agent Chat</h1>
        <div className="profile-selector">
          <label htmlFor="profile-select">Agent Profile: </label>
          <select id="profile-select" onChange={handleProfileChange} value={currentProfileId || ''} disabled={loading}>
            {profiles.length === 0 ? (
              <option value="">Loading Profiles...</option>
            ) : (
              profiles.map((profile) => (
                <option key={profile.id} value={profile.id}>
                  {profile.name}
                </option>
              ))
            )}
          </select>
          <span className="current-profile-display"> (Current: {currentProfileName})</span>
        </div>
      </header>
      <div className="chat-container">
        <div className="messages-display">
          {messages.map((msg, index) => (
            <div key={index} className={`message ${msg.sender} ${msg.agentAction || ''}`}>
              <strong>{msg.sender === 'user' ? 'You' : (msg.sender === 'ai' ? 'AI' : 'System')}:</strong> {msg.text}
              <span className="timestamp">{msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString() : ''}</span>
            </div>
          ))}
          {loading && <div className="message ai"><strong>AI:</strong> Thinking...</div>}
          <div ref={messagesEndRef} />
        </div>
        <form onSubmit={handleSendMessage} className="message-input-form">
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            placeholder="Type your message..."
            disabled={loading}
          />
          <button type="submit" disabled={loading}>Send</button>
        </form>
      </div>
    </div>
  );
}

export default App;
